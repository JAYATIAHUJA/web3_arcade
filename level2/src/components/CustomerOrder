import React from 'react';
import { Clock, User } from 'lucide-react';
import { pastryTypes } from '../utils/gameUtils';
import type { PastryType } from '../types';

interface CustomerOrderProps {
  order: PastryType[];
  timeLeft: number;
  isPlaying: boolean;
}

export function CustomerOrder({ order, timeLeft, isPlaying }: CustomerOrderProps) {
  const getTimerColor = () => {
    if (timeLeft > 15) return 'text-green-400';
    if (timeLeft > 8) return 'text-yellow-400';
    return 'text-red-400';
  };

  const getProgressColor = () => {
    if (timeLeft > 15) return 'bg-green-500';
    if (timeLeft > 8) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  return (
    <div className="bg-gray-800 rounded-2xl shadow-2xl p-6 border border-purple-500/30">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 p-2 rounded-full animate-float">
            <User className="w-6 h-6 text-white" />
          </div>
          <div>
            <h3 className="text-xl font-bold text-white">Customer Order</h3>
            <p className="text-gray-300">Please prepare these items</p>
          </div>
        </div>

        {isPlaying && (
          <div className="text-right">
            <div className={`text-2xl font-bold ${getTimerColor()}`}>
              <Clock className="w-6 h-6 inline mr-2 animate-float" />
              {timeLeft}s
            </div>
            <div className="w-24 h-2 bg-gray-700 rounded-full mt-2 overflow-hidden">
              <div
                className={`h-full rounded-full transition-all duration-1000 ${getProgressColor()} animate-shimmer`}
                style={{ width: `${(timeLeft / 25) * 100}%` }}
              />
            </div>
          </div>
        )}
      </div>

      {order.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          {order.map((pastryType, index) => (
            <div
              key={index}
              className={`
                bg-gray-700/50 backdrop-blur-sm
                rounded-xl p-4 text-center border-2 border-purple-500/30
                hover:border-purple-400 transition-all duration-300
                hover:scale-105 hover:shadow-lg hover:shadow-purple-500/20
                animate-fadeInScale
              `}
              style={{ animationDelay: `${index * 0.1}s` }}
            >
              <div className="text-4xl mb-2">
                <span className="animate-float" style={{ animationDelay: `${index * 0.2}s` }}>
                  {pastryTypes[pastryType].emoji}
                </span>
              </div>
              <div className="font-semibold text-white">
                {pastryTypes[pastryType].name}
              </div>
              <div className="text-sm text-gray-300">
                ${pastryTypes[pastryType].price}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-12 text-gray-400">
          <div className="text-4xl mb-4 animate-float">ðŸ‘¤</div>
          <p className="text-lg">Waiting for customer...</p>
        </div>
      )}

      {order.length > 0 && (
        <div className="mt-6 p-4 bg-blue-900/30 rounded-lg border border-blue-500/30 backdrop-blur-sm">
          <p className="text-blue-200 text-center">
            <strong>Total items:</strong> {order.length} â€¢ 
            <strong> Total value:</strong> ${order.reduce((sum, pastry) => sum + pastryTypes[pastry].price, 0)}
          </p>
        </div>
      )}
    </div>
  );
}
